#!/usr/sbin/nft -f

flush ruleset

# nfsense nftables inet (ipv4 + ipv6) table
table inet nfsense_inet {

    # Rule Counters for Forward Rules
    {% for rule in forward_rules -%}
        {% if rule.counter -%}
        counter fw_{{ loop.index }} {
        comment "{{ rule.name }}"
    }
        {% endif -%}
    {% endfor %}

    # Default Drop Rule Counter
    counter fw_default_drop {
        comment "Default Drop all Rule"
    }


    # Rule Counters for Destination NAT Rules
    {% for rule in destination_nat_rules -%}
        {% if rule.counter -%}
        counter dnat_{{ loop.index }} {
        comment "{{ rule.name }}"
    }
        {% endif -%}
    {% endfor %}


    # Rule Counters for Source NAT Rules
    {% for rule in source_nat_rules -%}
        {% if rule.counter -%}
        counter snat_{{ loop.index }} {
        comment "{{ rule.name }}"
    }
        {% endif -%}
    {% endfor %}

    # Inbound Rules
    chain inbound {
        type filter hook input priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # Allow loopback traffic
        iifname lo accept

        # temp Allow Inbound traffic only from private networks
        ip saddr { 10.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12 } counter accept comment "temp inbound ip allow"
        counter drop comment "inbound default drop"
    }

    # Forward Rules
    chain forward {
        type filter hook forward priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }


        # Generated Automatic SNAT Forward Rules
        {% for rule in automatic_snat_forward_rules -%}
        {% set index = loop.index -%}
        {% for service in rule.services -%}
        {{ rule.addresses }} {{ service }} {% if rule.log %} log prefix "auto_snat_fw_{{ index }}_{{ rule.verdict }}: " flags all {% endif %} {{ rule.verdict }}
        {% else %}
        {{ rule.addresses }} {% if rule.log %} log prefix "auto_snat_fw_{{ index }}_{{ rule.verdict }}: " flags all {% endif %} {{ rule.verdict }}
        {% endfor -%}
        {% endfor -%}

        # Generated Automatic DNAT Forward Rules
        # TODO match via packet mark?

        # Generated Forward Rules
        {% for rule in forward_rules -%}
        {% set index = loop.index -%}
        {% for service in rule.services -%}
        {{ rule.addresses }} {{ service }} {% if rule.counter %} counter name fw_{{ index }} {% endif %} {% if rule.log %} log prefix "fw_{{ index }}_{{ rule.verdict }}: " flags all {% endif %} {{ rule.verdict }}
        {% else %}
        {{ rule.addresses }} {% if rule.counter %} counter name fw_{{ index }} {% endif %} {% if rule.log %} log prefix "fw_{{ index }}_{{ rule.verdict }}: " flags all {% endif %} {{ rule.verdict }}
        {% endfor -%}
        {% endfor -%}

	# Default Drop Rule
	counter name fw_default_drop log prefix "fw_default_drop: " flags all drop
    }

    # Destination NAT Rules
    chain prerouting {
        type nat hook prerouting priority -100; policy accept;

        # Generated Destination NAT Rules
        {% for rule in destination_nat_rules -%}
        {% set index = loop.index -%}
        {% for service in rule.services -%}
        {{ rule.addresses }} {{ service }} {% if rule.counter %} counter name dnat_{{ index }} {% endif %} {% if rule.log %} log prefix "dnat_{{ index }}: " flags all {% endif %} {{ rule.destination_nat_action }}
        {% else %}
        {{ rule.addresses }} {% if rule.counter %} counter name dnat_{{ index }} {% endif %} {% if rule.log %} log prefix "dnat_{{ index }}: " flags all {% endif %} {{ rule.destination_nat_action }}
        {% endfor -%}
        {% endfor -%}
    }

    # Source NAT Rules
    chain postrouting {
        type nat hook postrouting priority 100; policy accept;

        # Generated Source NAT Rules
        {% for rule in source_nat_rules -%}
        {% set index = loop.index -%}
        {% for service in rule.services -%}
        {{ rule.addresses }} {{ service }} {% if rule.counter %} counter name snat_{{ index }} {% endif %} {% if rule.log %} log prefix "snat_{{ index }}: " flags all {% endif %} {{ rule.source_nat_action }}
        {% else %}
        {{ rule.addresses }} {% if rule.counter %} counter name snat_{{ index }} {% endif %} {% if rule.log %} log prefix "snat_{{ index }}: " flags all {% endif %} {{ rule.source_nat_action }}
        {% endfor -%}
        {% endfor -%}
    }
}
